 /**
     * Extracts question object from the question XML node.
     *
     * @param qNode
     *            Question node.
     * @return Question object.
     */
    private Question getQuestion(Node qNode) {
        Question question = new Question();
        Element qElement = (Element) qNode;

        // process question text
        Node qtNode = qElement.getElementsByTagName(XML.QUESTION_TEXT.value())
                .item(0);
        // set question text
        question.setQuestionText(qtNode.getTextContent());

        // process answers
        NodeList aNodeList = qElement.getElementsByTagName(XML.ANSWER.value());
        for (int j = 0; j < aNodeList.getLength(); j++) {
            Answer answer = getAnswer(aNodeList.item(j));

            // add answer
            question.getAnswers().add(answer);
        }

        return question;
    }

    /**
     * Extracts answer object from the answer XML node.
     *
     * @param aNode
     *            Answer node.
     * @return Answer object.
     */
    private Answer getAnswer(Node aNode) {
        Answer answer = new Answer();
        Element aElement = (Element) aNode;

        // process correct
        String correct = aElement.getAttribute(XML.CORRECT.value());
        answer.setCorrect(Boolean.valueOf(correct));

        // process content
        String content = aElement.getTextContent();
        answer.setContent(content);

        return answer;
    }

    // //////////////////////////////////////////////////////
    // Static util methods
    // //////////////////////////////////////////////////////

    /**
     * Creates and returns DOM of the Test container.
     *
     * @param test
     *            Test object.
     * @throws ParserConfigurationException
     */
    public static Document getDocument(Test test) throws ParserConfigurationException {

        // obtain DOM parser
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

        // set properties for Factory

        // XML document contains namespaces
        dbf.setNamespaceAware(true);

        DocumentBuilder db = dbf.newDocumentBuilder();
        Document document = db.newDocument();

        // create root element
        Element tElement = document.createElement(XML.TEST.value());

        // add root element
        document.appendChild(tElement);

        // add questions elements
        for (Question question : test.getQuestions()) {

            // add question
            Element qElement = document.createElement(XML.QUESTION.value());
            tElement.appendChild(qElement);

            // add question text
            Element qtElement =
                    document.createElement(XML.QUESTION_TEXT.value());
            qtElement.setTextContent(question.getQuestionText());
            qElement.appendChild(qtElement);

            // add answers
            for (Answer answer : question.getAnswers()) {
                Element aElement = document.createElement(XML.ANSWER.value());
                aElement.setTextContent(answer.getContent());

                // set attribute
                if (answer.isCorrect()) {
                    aElement.setAttribute(XML.CORRECT.value(), "true");
                }
                qElement.appendChild(aElement);
            }
        }

        return document;
    }

    /**
     * Saves Test object to XML file.
     *
     * @param test
     *            Test object to be saved.
     * @param xmlFileName
     *            Output XML file name.
     */
    public static void saveToXML(Test test, String xmlFileName)
            throws ParserConfigurationException, TransformerException {
        // Test -> DOM -> XML
        saveToXML(getDocument(test), xmlFileName);
    }

    /**
     * Save DOM to XML.
     *
     * @param document
     *            DOM to be saved.
     * @param xmlFileName
     *            Output XML file name.
     */
    public static void saveToXML(Document document, String xmlFileName)
            throws TransformerException {

        StreamResult result = new StreamResult(new File(xmlFileName));

        // set up transformation
        TransformerFactory tf = TransformerFactory.newInstance();
        javax.xml.transform.Transformer t = tf.newTransformer();
        t.setOutputProperty(OutputKeys.INDENT, "yes");

        // run transformation
        t.transform(new DOMSource(document), result);
    }